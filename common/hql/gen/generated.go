// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gen

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type Checkpoint string

const (
	CheckpointAccepted            Checkpoint = "Accepted"
	CheckpointTransferred         Checkpoint = "Transferred"
	CheckpointPublished           Checkpoint = "Published"
	CheckpointPublishconfirmed    Checkpoint = "PublishConfirmed"
	CheckpointAddedpiece          Checkpoint = "AddedPiece"
	CheckpointIndexedandannounced Checkpoint = "IndexedAndAnnounced"
	CheckpointComplete            Checkpoint = "Complete"
)

// DealDeal includes the requested fields of the GraphQL type Deal.
type DealDeal struct {
	ID                string      `json:"ID"`
	ProviderAddress   string      `json:"ProviderAddress"`
	PieceCid          string      `json:"PieceCid"`
	IsVerified        bool        `json:"IsVerified"`
	SignedProposalCid string      `json:"SignedProposalCid"`
	InboundFilePath   string      `json:"InboundFilePath"`
	ChainDealID       ChainDealID `json:"ChainDealID"`
	Checkpoint        Checkpoint  `json:"Checkpoint"`
	Err               string      `json:"Err"`
	Message           string      `json:"Message"`
}

// GetID returns DealDeal.ID, and is useful for accessing the field via an interface.
func (v *DealDeal) GetID() string { return v.ID }

// GetProviderAddress returns DealDeal.ProviderAddress, and is useful for accessing the field via an interface.
func (v *DealDeal) GetProviderAddress() string { return v.ProviderAddress }

// GetPieceCid returns DealDeal.PieceCid, and is useful for accessing the field via an interface.
func (v *DealDeal) GetPieceCid() string { return v.PieceCid }

// GetIsVerified returns DealDeal.IsVerified, and is useful for accessing the field via an interface.
func (v *DealDeal) GetIsVerified() bool { return v.IsVerified }

// GetSignedProposalCid returns DealDeal.SignedProposalCid, and is useful for accessing the field via an interface.
func (v *DealDeal) GetSignedProposalCid() string { return v.SignedProposalCid }

// GetInboundFilePath returns DealDeal.InboundFilePath, and is useful for accessing the field via an interface.
func (v *DealDeal) GetInboundFilePath() string { return v.InboundFilePath }

// GetChainDealID returns DealDeal.ChainDealID, and is useful for accessing the field via an interface.
func (v *DealDeal) GetChainDealID() ChainDealID { return v.ChainDealID }

// GetCheckpoint returns DealDeal.Checkpoint, and is useful for accessing the field via an interface.
func (v *DealDeal) GetCheckpoint() Checkpoint { return v.Checkpoint }

// GetErr returns DealDeal.Err, and is useful for accessing the field via an interface.
func (v *DealDeal) GetErr() string { return v.Err }

// GetMessage returns DealDeal.Message, and is useful for accessing the field via an interface.
func (v *DealDeal) GetMessage() string { return v.Message }

// DealResponse is returned by Deal on success.
type DealResponse struct {
	// Get Deal by ID
	Deal DealDeal `json:"deal"`
}

// GetDeal returns DealResponse.Deal, and is useful for accessing the field via an interface.
func (v *DealResponse) GetDeal() DealDeal { return v.Deal }

// GetDealListByStatusDealsDealList includes the requested fields of the GraphQL type DealList.
type GetDealListByStatusDealsDealList struct {
	TotalCount int `json:"totalCount"`
}

// GetTotalCount returns GetDealListByStatusDealsDealList.TotalCount, and is useful for accessing the field via an interface.
func (v *GetDealListByStatusDealsDealList) GetTotalCount() int { return v.TotalCount }

// GetDealListByStatusResponse is returned by GetDealListByStatus on success.
type GetDealListByStatusResponse struct {
	// Get all Deals
	Deals GetDealListByStatusDealsDealList `json:"deals"`
}

// GetDeals returns GetDealListByStatusResponse.Deals, and is useful for accessing the field via an interface.
func (v *GetDealListByStatusResponse) GetDeals() GetDealListByStatusDealsDealList { return v.Deals }

// GetSectorStatesResponse is returned by GetSectorStates on success.
type GetSectorStatesResponse struct {
	// Get sealing pipeline state
	Sealingpipeline GetSectorStatesStruct `json:"sealingpipeline"`
}

// GetSealingpipeline returns GetSectorStatesResponse.Sealingpipeline, and is useful for accessing the field via an interface.
func (v *GetSectorStatesResponse) GetSealingpipeline() GetSectorStatesStruct {
	return v.Sealingpipeline
}

// GetSectorStatesStruct includes the requested fields of the GraphQL type SealingPipeline.
type GetSectorStatesStruct struct {
	SectorStates GetSectorStatesSealingPipeline `json:"SectorStates"`
}

// GetSectorStates returns GetSectorStatesSealingpipelineSealingPipeline.SectorStates, and is useful for accessing the field via an interface.
func (v *GetSectorStatesStruct) GetSectorStates() GetSectorStatesSealingPipeline {
	return v.SectorStates
}

// GetSectorStatesSealingPipeline includes the requested fields of the GraphQL type SectorStates.
type GetSectorStatesSealingPipeline struct {
	Regular        []GetSectorStatesRegularSectorState        `json:"Regular"`
	SnapDeals      []GetSectorStatesSnapDealsSectorState      `json:"SnapDeals"`
	RegularError   []GetSectorStatesRegularErrorSectorState   `json:"RegularError"`
	SnapDealsError []GetSectorStatesSnapDealsErrorSectorState `json:"SnapDealsError"`
}

// GetRegular returns GetSectorStatesSealingPipeline.Regular, and is useful for accessing the field via an interface.
func (v *GetSectorStatesSealingPipeline) GetRegular() []GetSectorStatesRegularSectorState {
	return v.Regular
}

// GetSnapDeals returns GetSectorStatesSealingPipeline.SnapDeals, and is useful for accessing the field via an interface.
func (v *GetSectorStatesSealingPipeline) GetSnapDeals() []GetSectorStatesSnapDealsSectorState {
	return v.SnapDeals
}

// GetRegularError returns GetSectorStatesSealingPipeline.RegularError, and is useful for accessing the field via an interface.
func (v *GetSectorStatesSealingPipeline) GetRegularError() []GetSectorStatesRegularErrorSectorState {
	return v.RegularError
}

// GetSnapDealsError returns GetSectorStatesSealingPipeline.SnapDealsError, and is useful for accessing the field via an interface.
func (v *GetSectorStatesSealingPipeline) GetSnapDealsError() []GetSectorStatesSnapDealsErrorSectorState {
	return v.SnapDealsError
}

// GetSectorStatesRegularErrorSectorState includes the requested fields of the GraphQL type SectorState.
type GetSectorStatesRegularErrorSectorState struct {
	Key   string `json:"Key"`
	Value int    `json:"Value"`
}

// GetKey returns GetSectorStatesRegularErrorSectorState.Key, and is useful for accessing the field via an interface.
func (v *GetSectorStatesRegularErrorSectorState) GetKey() string {
	return v.Key
}

// GetValue returns GetSectorStatesRegularErrorSectorState.Value, and is useful for accessing the field via an interface.
func (v *GetSectorStatesRegularErrorSectorState) GetValue() int {
	return v.Value
}

// GetSectorStatesRegularSectorState includes the requested fields of the GraphQL type SectorState.
type GetSectorStatesRegularSectorState struct {
	Key   string `json:"Key"`
	Value int    `json:"Value"`
}

// GetKey returns GetSectorStatesRegularSectorState.Key, and is useful for accessing the field via an interface.
func (v *GetSectorStatesRegularSectorState) GetKey() string {
	return v.Key
}

// GetValue returns GetSectorStatesRegularSectorState.Value, and is useful for accessing the field via an interface.
func (v *GetSectorStatesRegularSectorState) GetValue() int {
	return v.Value
}

// GetSectorStatesSnapDealsErrorSectorState includes the requested fields of the GraphQL type SectorState.
type GetSectorStatesSnapDealsErrorSectorState struct {
	Key   string `json:"Key"`
	Value int    `json:"Value"`
}

// GetKey returns GetSectorStatesSnapDealsErrorSectorState.Key, and is useful for accessing the field via an interface.
func (v *GetSectorStatesSnapDealsErrorSectorState) GetKey() string {
	return v.Key
}

// GetValue returns GetSectorStatesSnapDealsErrorSectorState.Value, and is useful for accessing the field via an interface.
func (v *GetSectorStatesSnapDealsErrorSectorState) GetValue() int {
	return v.Value
}

// GetSectorStatesSnapDealsSectorState includes the requested fields of the GraphQL type SectorState.
type GetSectorStatesSnapDealsSectorState struct {
	Key   string `json:"Key"`
	Value int    `json:"Value"`
}

// GetKey returns GetSectorStatesSnapDealsSectorState.Key, and is useful for accessing the field via an interface.
func (v *GetSectorStatesSnapDealsSectorState) GetKey() string {
	return v.Key
}

// GetValue returns GetSectorStatesSnapDealsSectorState.Value, and is useful for accessing the field via an interface.
func (v *GetSectorStatesSnapDealsSectorState) GetValue() int {
	return v.Value
}

// LegacyDealLegacyDeal includes the requested fields of the GraphQL type LegacyDeal.
type LegacyDealLegacyDeal struct {
	ID              string      `json:"ID"`
	ProviderAddress string      `json:"ProviderAddress"`
	PieceCid        string      `json:"PieceCid"`
	SectorNumber    ChainDealID `json:"SectorNumber"`
	ChainDealID     ChainDealID `json:"ChainDealID"`
	Status          string      `json:"Status"`
	Message         string      `json:"Message"`
	InboundCARPath  string      `json:"InboundCARPath"`
	DealDataRoot    string      `json:"DealDataRoot"`
}

// GetID returns LegacyDealLegacyDeal.ID, and is useful for accessing the field via an interface.
func (v *LegacyDealLegacyDeal) GetID() string { return v.ID }

// GetProviderAddress returns LegacyDealLegacyDeal.ProviderAddress, and is useful for accessing the field via an interface.
func (v *LegacyDealLegacyDeal) GetProviderAddress() string { return v.ProviderAddress }

// GetPieceCid returns LegacyDealLegacyDeal.PieceCid, and is useful for accessing the field via an interface.
func (v *LegacyDealLegacyDeal) GetPieceCid() string { return v.PieceCid }

// GetSectorNumber returns LegacyDealLegacyDeal.SectorNumber, and is useful for accessing the field via an interface.
func (v *LegacyDealLegacyDeal) GetSectorNumber() ChainDealID { return v.SectorNumber }

// GetChainDealID returns LegacyDealLegacyDeal.ChainDealID, and is useful for accessing the field via an interface.
func (v *LegacyDealLegacyDeal) GetChainDealID() ChainDealID { return v.ChainDealID }

// GetStatus returns LegacyDealLegacyDeal.Status, and is useful for accessing the field via an interface.
func (v *LegacyDealLegacyDeal) GetStatus() string { return v.Status }

// GetMessage returns LegacyDealLegacyDeal.Message, and is useful for accessing the field via an interface.
func (v *LegacyDealLegacyDeal) GetMessage() string { return v.Message }

// GetInboundCARPath returns LegacyDealLegacyDeal.InboundCARPath, and is useful for accessing the field via an interface.
func (v *LegacyDealLegacyDeal) GetInboundCARPath() string { return v.InboundCARPath }

// GetDealDataRoot returns LegacyDealLegacyDeal.DealDataRoot, and is useful for accessing the field via an interface.
func (v *LegacyDealLegacyDeal) GetDealDataRoot() string { return v.DealDataRoot }

// LegacyDealResponse is returned by LegacyDeal on success.
type LegacyDealResponse struct {
	// Get Deal made with legacy markets endpoint by ID
	LegacyDeal LegacyDealLegacyDeal `json:"legacyDeal"`
}

// GetLegacyDeal returns LegacyDealResponse.LegacyDeal, and is useful for accessing the field via an interface.
func (v *LegacyDealResponse) GetLegacyDeal() LegacyDealLegacyDeal { return v.LegacyDeal }

// __DealInput is used internally by genqlient
type __DealInput struct {
	Uuid string `json:"uuid"`
}

// GetUuid returns __DealInput.Uuid, and is useful for accessing the field via an interface.
func (v *__DealInput) GetUuid() string { return v.Uuid }

// __GetDealListByStatusInput is used internally by genqlient
type __GetDealListByStatusInput struct {
	CheckPoint Checkpoint `json:"checkPoint"`
}

// GetCheckPoint returns __GetDealListByStatusInput.CheckPoint, and is useful for accessing the field via an interface.
func (v *__GetDealListByStatusInput) GetCheckPoint() Checkpoint { return v.CheckPoint }

// __LegacyDealInput is used internally by genqlient
type __LegacyDealInput struct {
	ProposalCid string `json:"proposalCid"`
}

// GetProposalCid returns __LegacyDealInput.ProposalCid, and is useful for accessing the field via an interface.
func (v *__LegacyDealInput) GetProposalCid() string { return v.ProposalCid }

// GetLegacyDealsList includes the requested fields of the GraphQL type LegacyDealList.
type GetLegacyDealsList struct {
	Deals []GetLegacyDealsListDeal `json:"deals"`
}

// GetDeals returns GetLegacyDealsList.Deals, and is useful for accessing the field via an interface.
func (v *GetLegacyDealsList) GetDeals() []GetLegacyDealsListDeal {
	return v.Deals
}

// GetLegacyDealsListDeal includes the requested fields of the GraphQL type LegacyDeal.
type GetLegacyDealsListDeal struct {
	ID     string `json:"ID"`
	Status string `json:"Status"`
}

// GetID returns GetLegacyDealsListDeal.ID, and is useful for accessing the field via an interface.
func (v *GetLegacyDealsListDeal) GetID() string { return v.ID }

// GetStatus returns GetLegacyDealsListDeal.Status, and is useful for accessing the field via an interface.
func (v *GetLegacyDealsListDeal) GetStatus() string { return v.Status }

// GetLegacyDealsResponse is returned by getLegacyDeals on success.
type GetLegacyDealsResponse struct {
	// Get all Deals made with legacy markets endpoint
	LegacyDeals GetLegacyDealsList `json:"legacyDeals"`
}

// GetLegacyDeals returns GetLegacyDealsResponse.LegacyDeals, and is useful for accessing the field via an interface.
func (v *GetLegacyDealsResponse) GetLegacyDeals() GetLegacyDealsList {
	return v.LegacyDeals
}

func Deal(
	ctx context.Context,
	client graphql.Client,
	uuid string,
) (*DealResponse, error) {
	req := &graphql.Request{
		OpName: "Deal",
		Query: `
query Deal ($uuid: ID!) {
	deal(id: $uuid) {
		ID
		ProviderAddress
		PieceCid
		IsVerified
		SignedProposalCid
		InboundFilePath
		ChainDealID
		Checkpoint
		Err
		Message
	}
}
`,
		Variables: &__DealInput{
			Uuid: uuid,
		},
	}
	var err error

	var data DealResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetDealListByStatus(
	ctx context.Context,
	client graphql.Client,
	checkPoint Checkpoint,
) (*GetDealListByStatusResponse, error) {
	req := &graphql.Request{
		OpName: "GetDealListByStatus",
		Query: `
query GetDealListByStatus ($checkPoint: Checkpoint!) {
	deals(filter: {Checkpoint:$checkPoint}) {
		totalCount
	}
}
`,
		Variables: &__GetDealListByStatusInput{
			CheckPoint: checkPoint,
		},
	}
	var err error

	var data GetDealListByStatusResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetLegacyDeals(
	ctx context.Context,
	client graphql.Client,
) (*GetLegacyDealsResponse, error) {
	req := &graphql.Request{
		OpName: "GetLegacyDeals",
		Query: `
query GetLegacyDeals {
	legacyDeals(limit: 1000000) {
		deals {
			ID
			Status
		}
	}
}
`,
	}
	var err error

	var data GetLegacyDealsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetSectorStates(
	ctx context.Context,
	client graphql.Client,
) (*GetSectorStatesResponse, error) {
	req := &graphql.Request{
		OpName: "GetSectorStates",
		Query: `
query GetSectorStates {
	sealingpipeline {
		SectorStates {
			Regular {
				Key
				Value
			}
			SnapDeals {
				Key
				Value
			}
			RegularError {
				Key
				Value
			}
			SnapDealsError {
				Key
				Value
			}
		}
	}
}
`,
	}
	var err error

	var data GetSectorStatesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func LegacyDeal(
	ctx context.Context,
	client graphql.Client,
	proposalCid string,
) (*LegacyDealResponse, error) {
	req := &graphql.Request{
		OpName: "LegacyDeal",
		Query: `
query LegacyDeal ($proposalCid: ID!) {
	legacyDeal(id: $proposalCid) {
		ID
		ProviderAddress
		PieceCid
		SectorNumber
		ChainDealID
		Status
		Message
		InboundCARPath
		ProviderAddress
		DealDataRoot
	}
}
`,
		Variables: &__LegacyDealInput{
			ProposalCid: proposalCid,
		},
	}
	var err error

	var data LegacyDealResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
